
name: ci-cd-workflow

# Build on every push (regardless of branch) for code changes
# Build on PR to ensure the merge is good for code changes
# Allow manual builds
on:
  push:
    paths:
    - '.github/workflows/**'
    - 'src/**'

  pull_request:
    paths:
    - '.github/workflows/**'
    - 'src/**'

  workflow_dispatch:

env:
  DOCKER_REPO: ghcr.io/${{ github.actor }}

jobs:
  gitVersionJob:
    name: Run GitVersion
    runs-on: ubuntu-latest
    outputs:
      major: ${{ steps.execute-gitversion-step.outputs.major }}
      minor: ${{ steps.execute-gitversion-step.outputs.minor }}
      patch: ${{ steps.execute-gitversion-step.outputs.patch }}
      majorMinor: ${{ steps.execute-gitversion-step.outputs.major }}.${{ steps.execute-gitversion-step.outputs.minor }}
      releaseLabel: ${{ steps.execute-gitversion-step.outputs.major }}.${{ steps.execute-gitversion-step.outputs.minor }}.${{ steps.execute-gitversion-step.outputs.patch }}${{ steps.execute-gitversion-step.outputs.prereleaselabelwithdash }}
      majorMinorReleaseLabel: ${{ steps.execute-gitversion-step.outputs.major }}.${{ steps.execute-gitversion-step.outputs.minor }}${{ steps.execute-gitversion-step.outputs.prereleaselabelwithdash }}
      majorReleaseLabel: ${{ steps.execute-gitversion-step.outputs.major }}${{ steps.execute-gitversion-step.outputs.prereleaselabelwithdash }}
      semVer: ${{ steps.execute-gitversion-step.outputs.semver }}
      shorSha: ${{ steps.execute-gitversion-step.outputs.shortSha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        id: install-gitversion-step
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '5.x'
        
      - name: Execute GitVersion
        id: execute-gitversion-step
        uses: gittools/actions/gitversion/execute@v0.9.14

  buildApplicationJob:
    name: Build .NET Applciations
    needs: gitVersionJob
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'

      - name: Build Projects
        working-directory: ./src
        run: |
          dotnet build ./Tsa.Submissions.Coding.sln \
            --configuration Release \
            --nologo \
            /p:Version=${{ needs.gitVersionJob.outputs.semVer }}

      - name: Run Unit Tests
        working-directory: ./src
        run: |
          dotnet test ./Tsa.Submissions.Coding.Tests/Tsa.Submissions.Coding.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --filter "TestCategory=UnitTest" \
            --nologo \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover

      - uses: codecov/codecov-action@v2
        with:
          files: ./src/Tsa.Submissions.Coding.Tests/coverage.opencover.xml

      - name: Publish Web API
        working-directory: ./src
        run: |
          dotnet publish ./Tsa.Submissions.Coding.WebApi/Tsa.Submissions.Coding.WebApi.csproj \
            --configuration Release \
            --no-build \
            --output ${{ runner.temp }}/Tsa.Submissions.Coding.WebApi \
            --nologo

      - uses: actions/upload-artifact@v2
        name: Upload Published Web API App
        with:
          name: web-api
          path: ${{ runner.temp }}/Tsa.Submissions.Coding.WebApi
          if-no-files-found: error

  buildDockerContainersJob:
    name: Build Docker Container
    needs: [gitVersionJob, buildApplicationJob]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build tsa/submissions/coding/${{ matrix.image }} Image
        run: |
          docker build \
            --tag $DOCKER_REPO/tsa/submissions/coding/${{ matrix.image }}:${{ needs.gitVersionJob.outputs.semVer }} \
            --tag $DOCKER_REPO/tsa/submissions/coding/${{ matrix.image }}:${{ needs.gitVersionJob.outputs.releaseLabel }} \
            --tag $DOCKER_REPO/tsa/submissions/coding/${{ matrix.image }}:${{ needs.gitVersionJob.outputs.majorMinorReleaseLabel }} \
            --tag $DOCKER_REPO/tsa/submissions/coding/${{ matrix.image }}:${{ needs.gitVersionJob.outputs.majorReleaseLabel }} \
            --file ${{ matrix.dockerfile }} \
            ${{ matrix.dockerContext }}
      
      - name: Docker Login to GHCR
        uses: docker/login-action@v1
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Push tsa/submissions/coding/${{ matrix.image }} Image
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          docker push $DOCKER_REPO/tsa/submissions/coding/${{ matrix.image }}:${{ needs.gitVersionJob.outputs.semVer }}
          docker push $DOCKER_REPO/tsa/submissions/coding/${{ matrix.image }}:${{ needs.gitVersionJob.outputs.releaseLabel }}
          docker push $DOCKER_REPO/tsa/submissions/coding/${{ matrix.image }}:${{ needs.gitVersionJob.outputs.majorMinorReleaseLabel }}
          docker push $DOCKER_REPO/tsa/submissions/coding/${{ matrix.image }}:${{ needs.gitVersionJob.outputs.majorReleaseLabel }}

  tagRepoJob:
    name: Create Git Tag
    needs: [gitVersionJob, buildDockerContainerJob, runIntegrationTestsJob]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ needs.gitVersionJob.outputs.semVer }}',
              sha: context.sha
            })